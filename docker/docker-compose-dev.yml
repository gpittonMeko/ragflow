version: '3.8'

services:

  es01:
    image: elasticsearch:${STACK_VERSION}
    container_name: ragflow-es-01
    env_file: .env
    volumes:
      - esdata01:/usr/share/elasticsearch/data
    ports:
      - "${ES_PORT:-9200}:9200"
    environment:
      - node.name=es01
      - cluster.name=ragflow-cluster
      - network.host=0.0.0.0
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
      - xpack.security.enabled=false
      - TZ=${TIMEZONE}
    ulimits:
      memlock:
        soft: -1
        hard: -1
    mem_limit: 1g
    restart: on-failure
    networks:
      - ragflow

  mysql:
    image: mysql:8.0.39
    container_name: ragflow-mysql
    env_file: .env
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_PASSWORD}
      - TZ=${TIMEZONE}
    volumes:
      - mysql_data:/var/lib/mysql
    ports:
      - "${MYSQL_PORT:-3306}:3306"
    restart: on-failure
    networks:
      - ragflow

  redis:
    image: redis:7
    container_name: ragflow-redis
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    command: redis-server --maxmemory 256mb --maxmemory-policy allkeys-lru
    networks:
      - ragflow
    restart: on-failure

  minio:
    image: quay.io/minio/minio:RELEASE.2023-12-20T01-00-02Z
    container_name: ragflow-minio
    command: server --console-address ":9001" /data
    ports:
      - "${MINIO_PORT:-9000}:9000"
      - "${MINIO_CONSOLE_PORT:-9001}:9001"
    environment:
      - MINIO_ROOT_USER=${MINIO_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_PASSWORD}
      - TZ=${TIMEZONE}
    volumes:
      - minio_data:/data
    networks:
      - ragflow
    restart: on-failure

  ragflow-server:
    build:
      context: ../
      dockerfile: Dockerfile
    image: ragflow-patched:latest
    container_name: ragflow-server
    env_file: .env
    depends_on:
      mysql:
        condition: service_healthy
      es01:
        condition: service_started
      redis:
        condition: service_started
      minio:
        condition: service_started
    ports:
      - "${SVR_HTTP_PORT:-9380}:9380"
      - "80:80"
      - "443:443"
      - "5678:5678"
      - "5679:5679"
      - "9382:9382"
    volumes:
      - ./ragflow-logs:/ragflow/logs
      - ../web:/ragflow/web      # Monta il codice frontend/backend per editing live
      # aggiungi altri volumi conf/nginx se ti servono
    environment:
      - TZ=${TIMEZONE}
      # Altro se serve
    restart: on-failure
    networks:
      - ragflow
    extra_hosts:
      - "host.docker.internal:host-gateway"

  executor:
    image: ${RAGFLOW_IMAGE}
    container_name: ragflow-executor
    env_file: .env
    depends_on:
      mysql:
        condition: service_healthy
      ragflow-server:
        condition: service_started
    command: ["--workers=5"]
    volumes:
      - ./ragflow-logs:/ragflow/logs
      - ../web:/ragflow/web
    environment:
      - TZ=${TIMEZONE}
    restart: on-failure
    networks:
      - ragflow
    extra_hosts:
      - "host.docker.internal:host-gateway"

volumes:
  esdata01:
  mysql_data:
  ragflow-logs:
  redis_data:
  minio_data:

networks:
  ragflow:
    driver: bridge